// Automatically generated by scripts\Generate-CBinding.ps1
// DO NOT EDIT
// Source: include/mxnet/c_predict_api.h

using System;
using System.Runtime.InteropServices;
using AtomicSymbolCreator = System.IntPtr;
using DataIterCreator = System.IntPtr;
using DataIterHandle = System.IntPtr;
using ExecutorHandle = System.IntPtr;
using ExecutorMonitorCallback = System.IntPtr;
using KVStoreHandle = System.IntPtr;
using NDArrayHandle = System.IntPtr;
using ProfileHandle = System.IntPtr;
using SymbolHandle = System.IntPtr;
using CudaModuleHandle = System.IntPtr;
using CudaKernelHandle = System.IntPtr;
using DLManagedTensorHandle = System.IntPtr;
using FunctionHandle = System.IntPtr;
using LibFeature = System.IntPtr;
using CachedOpHandle = System.IntPtr;
using MXKVStoreUpdater = System.IntPtr;
using MXKVStoreStrUpdater = System.IntPtr;
using MXKVStoreServerController = System.IntPtr;
using RecordIOHandle = System.IntPtr;
using RtcHandle = System.IntPtr;
using CustomOpPropCreator = System.IntPtr;
using EngineSyncFunc = System.IntPtr;
using EngineAsyncFunc = System.IntPtr;
using EngineVarHandle = System.IntPtr;
using EngineFuncParamDeleter = System.IntPtr;
using ContextHandle = System.IntPtr;
using EngineFnPropertyHandle = System.IntPtr;
using MXCallbackList = System.IntPtr;
using PredictorHandle = System.IntPtr;
using NDListHandle = System.IntPtr;
using size_t = System.Int64;
using int64_t = System.Int64;
using uint64_t = System.Int64;
using dim_t = System.Int64;
using mx_uint = System.Int32;
using mx_float = System.Single;

namespace Horker.MXNet.Interop
{
    public static partial class _LIB
    {

        // MXNET_DLL const char* MXGetLastError();
        // (Dropped)

        // MXNET_DLL int MXPredCreate(const char* symbol_json_str,
        //     const void* param_bytes,
        //     int param_size,
        //     int dev_type, int dev_id,
        //     mx_uint num_input_nodes,
        //     const char** input_keys,
        //     const mx_uint* input_shape_indptr,
        //     const mx_uint* input_shape_data,
        //     PredictorHandle* out);
        [DllImport(MXNetDll)]
        public static extern int MXPredCreate([MarshalAs(UnmanagedType.LPUTF8Str)] string symbol_json_str,
            IntPtr param_bytes,
            int param_size,
            int dev_type, int dev_id,
            mx_uint num_input_nodes,
            [MarshalAs(UnmanagedType.LPUTF8Str)] string[] input_keys,
            mx_uint[] input_shape_indptr,
            mx_uint[] input_shape_data,
            out PredictorHandle @out);

        // MXNET_DLL int MXPredCreatePartialOut(const char* symbol_json_str,
        //     const void* param_bytes,
        //     int param_size,
        //     int dev_type, int dev_id,
        //     mx_uint num_input_nodes,
        //     const char** input_keys,
        //     const mx_uint* input_shape_indptr,
        //     const mx_uint* input_shape_data,
        //     mx_uint num_output_nodes,
        //     const char** output_keys,
        //     PredictorHandle* out);
        [DllImport(MXNetDll)]
        public static extern int MXPredCreatePartialOut([MarshalAs(UnmanagedType.LPUTF8Str)] string symbol_json_str,
            IntPtr param_bytes,
            int param_size,
            int dev_type, int dev_id,
            mx_uint num_input_nodes,
            [MarshalAs(UnmanagedType.LPUTF8Str)] string[] input_keys,
            mx_uint[] input_shape_indptr,
            mx_uint[] input_shape_data,
            mx_uint num_output_nodes,
            [MarshalAs(UnmanagedType.LPUTF8Str)] out string output_keys,
            out PredictorHandle @out);

        // MXNET_DLL int MXPredCreateMultiThread(const char* symbol_json_str,
        //     const void* param_bytes,
        //     int param_size,
        //     int dev_type, int dev_id,
        //     mx_uint num_input_nodes,
        //     const char** input_keys,
        //     const mx_uint* input_shape_indptr,
        //     const mx_uint* input_shape_data,
        //     int num_threads,
        //     PredictorHandle* out);
        [DllImport(MXNetDll)]
        public static extern int MXPredCreateMultiThread([MarshalAs(UnmanagedType.LPUTF8Str)] string symbol_json_str,
            IntPtr param_bytes,
            int param_size,
            int dev_type, int dev_id,
            mx_uint num_input_nodes,
            [MarshalAs(UnmanagedType.LPUTF8Str)] string[] input_keys,
            mx_uint[] input_shape_indptr,
            mx_uint[] input_shape_data,
            int num_threads,
            out PredictorHandle @out);

        // MXNET_DLL int MXPredReshape(mx_uint num_input_nodes,
        //     const char** input_keys,
        //     const mx_uint* input_shape_indptr,
        //     const mx_uint* input_shape_data,
        //     PredictorHandle handle,
        //     PredictorHandle* out);
        [DllImport(MXNetDll)]
        public static extern int MXPredReshape(mx_uint num_input_nodes,
            [MarshalAs(UnmanagedType.LPUTF8Str)] string[] input_keys,
            mx_uint[] input_shape_indptr,
            mx_uint[] input_shape_data,
            PredictorHandle handle,
            out PredictorHandle @out);

        // MXNET_DLL int MXPredGetOutputShape(PredictorHandle handle,
        //     mx_uint index,
        //     mx_uint** shape_data,
        //     mx_uint* shape_ndim);
        [DllImport(MXNetDll)]
        public static extern int MXPredGetOutputShape(PredictorHandle handle,
            mx_uint index,
            out mx_uint[] shape_data,
            mx_uint[] shape_ndim);

        // MXNET_DLL int MXPredSetInput(PredictorHandle handle,
        //     const char* key,
        //     const mx_float* data,
        //     mx_uint size);
        [DllImport(MXNetDll)]
        public static extern int MXPredSetInput(PredictorHandle handle,
            [MarshalAs(UnmanagedType.LPUTF8Str)] string key,
            out mx_float data,
            mx_uint size);

        // MXNET_DLL int MXPredForward(PredictorHandle handle);
        [DllImport(MXNetDll)]
        public static extern int MXPredForward(PredictorHandle handle);

        // MXNET_DLL int MXPredPartialForward(PredictorHandle handle, int step, int* step_left);
        [DllImport(MXNetDll)]
        public static extern int MXPredPartialForward(PredictorHandle handle, int step, out int step_left);

        // MXNET_DLL int MXPredGetOutput(PredictorHandle handle,
        //     mx_uint index,
        //     mx_float* data,
        //     mx_uint size);
        [DllImport(MXNetDll)]
        public static extern int MXPredGetOutput(PredictorHandle handle,
            mx_uint index,
            out mx_float data,
            mx_uint size);

        // MXNET_DLL int MXPredFree(PredictorHandle handle);
        [DllImport(MXNetDll)]
        public static extern int MXPredFree(PredictorHandle handle);

        // MXNET_DLL int MXNDListCreate(const char* nd_file_bytes,
        //     int nd_file_size,
        //     NDListHandle *out,
        //     mx_uint* out_length);
        [DllImport(MXNetDll)]
        public static extern int MXNDListCreate([MarshalAs(UnmanagedType.LPUTF8Str)] string nd_file_bytes,
            int nd_file_size,
            out NDListHandle @out,
            out mx_uint out_length);

        // MXNET_DLL int MXNDListGet(NDListHandle handle,
        //     mx_uint index,
        //     const char** out_key,
        //     const mx_float** out_data,
        //     const mx_uint** out_shape,
        //     mx_uint* out_ndim);
        [DllImport(MXNetDll)]
        public static extern int MXNDListGet(NDListHandle handle,
            mx_uint index,
            [MarshalAs(UnmanagedType.LPUTF8Str)] out string out_key,
            out mx_float[] out_data,
            out mx_uint[] out_shape,
            out mx_uint out_ndim);

        // MXNET_DLL int MXNDListFree(NDListHandle handle);
        [DllImport(MXNetDll)]
        public static extern int MXNDListFree(NDListHandle handle);
    }
}

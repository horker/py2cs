{
  "UsingNamespaces": [
    "using Op = Horker.MXNet.NDArray.Op;",
    "using _internal = Horker.MXNet.NDArray._internal;"
  ],
  "Namespace": "Horker.MXNet",
  "Replacements": {
  },
  "TypeNames": {
  },
  "Classes": {
    "Helper": {
      "Name": "Helper",
      "BaseClasses": null,
      "Fields": {},
      "Methods": {
        "_new_empty_handle": [
          {
            "Signature": "internal static NDArrayHandle _newEmptyHandle()"
          }
        ],
        "_new_alloc_handle": [
          {
            "Signature": "internal static NDArrayHandle _newAllocHandle(Shape shape, Context ctx, bool delayAlloc, DType dtype = default)"
          }
        ],
        "_new_from_shared_mem": [
          {
            "Signature": "internal static NDArrayHandle _newFromSharedMem(int sharedPid, int sharedId, Shape shape, DType dtype)"
          }
        ],
        "waitall": [
          {
            "Signature": "public static void Waitall()"
          }
        ],
        "_storage_type": [
          {
            "Signature": "internal static int _storageType(NDArrayHandle handle)"
          }
        ],
        "_get_indexing_dispatch_code": [
          {
            "Signature": "internal static int _getIndexingDispatchCode(int key)"
          },
          {
            "Signature": "internal static int _getIndexingDispatchCode(PySlice key)"
          },
          {
            "Signature": "internal static int _getIndexingDispatchCode(object key)"
          }
        ],
        "_get_index_range": [
          {
            "Signature": "internal static ValueTuple<int, int, int> _getIndexRange(int start, int stop, int length, int step = 1)"
          }
        ],
        "_get_oshape_of_gather_nd_op": [
          {
            "Signature": "internal static Shape _getOshapeOfGatherNdOp(Shape dshape, Shape ishape)"
          }
        ],
        "_get_dim_size": [
          {
            "Signature": "internal static object _getDimSize(int start, int stop, int step)",
            "Locals": {
              "dim_size": {
                "Type": "int",
                "Definition": "int dimSize = 0;"
              }
            }
          }
        ],
        "_get_broadcast_shape": [
          {
            "Signature": "internal static object _getBroadcastShape(Shape shape1, Shape shape2)",
            "Locals": {
              "shape": {
                "Type": "Shape",
                "Definition": "Shape shape;"
              }
            }
          }
        ],
        "onehot_encode": [
          {
            "Signature": "public static NDArray OnehotEncode(NDArray indices, NDArray @out)"
          }
        ],
        "ones": [
          {
            "Signature": "public static object Ones(Shape shape, Context ctx = null, DType dtype = default)"
          }
        ],
        "full": [
          {
            "Signature": "public static NDArray Full(Shape shape, float val, Context ctx = null, DType dtype = default, NDArray @out = null)"
          }
        ],
        "array": [
          {
            "Signature": "public static object Array(NDArray sourceArray, Context ctx = null, DType dtype = default)"
          }
        ],
        "moveaxis": [
          {
            "Signature": "public static object Moveaxis(NDArray tensor, Shape source, Shape destination)"
          }
        ],
        "arange": [
          {
            "Signature": "public static NDArray Arange(double start, double stop = double.NaN, double step = 1.0, int repeat = 1, bool inferRange = false, Context ctx = null, DType dtype = default)"
          }
        ],
        "linspace": [
          {
            "Signature": "public static NDArray Linspace(double start, double stop, int num, bool endpoint = true, Context ctx = null, DType dtype = default)"
          }
        ],
        "_ufunc_helper": [
          {
            "Drop": true,
            "Signature": "internal static object _ufuncHelper(object lhs, object rhs, object fnArray, object fnScalar, object lfnScalar, object rfnScalar = null)"
          }
        ],
        "add": [
          {
            "Signature": "public static NDArray Add(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Add(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Add(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Add(float lhs, float rhs)"
          }
        ],
        "subtract": [
          {
            "Signature": "public static NDArray Subtract(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Subtract(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Subtract(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Subtract(float lhs, float rhs)"
          }
        ],
        "multiply": [
          {
            "Signature": "public static NDArray Multiply(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Multiply(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Multiply(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Multiply(float lhs, float rhs)"
          }
        ],
        "divide": [
          {
            "Signature": "public static NDArray Divide(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Divide(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Divide(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Divide(float lhs, float rhs)"
          }
        ],
        "modulo": [
          {
            "Signature": "public static NDArray Modulo(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Modulo(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Modulo(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Modulo(float lhs, float rhs)"
          }
        ],
        "power": [
          {
            "Signature": "public static NDArray Power(NDArray @base, NDArray exp)"
          },
          {
            "Signature": "public static NDArray Power(NDArray @base, float exp)"
          },
          {
            "Signature": "public static NDArray Power(float @base, NDArray exp)"
          },
          {
            "Signature": "public static float Power(float @base, float exp)"
          }
        ],
        "maximum": [
          {
            "Signature": "public static NDArray Maximum(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Maximum(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Maximum(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Maximum(float lhs, float rhs)"
          }
        ],
        "minimum": [
          {
            "Signature": "public static NDArray Minimum(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Minimum(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Minimum(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Minimum(float lhs, float rhs)"
          }
        ],
        "equal": [
          {
            "Signature": "public static NDArray Equal(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Equal(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Equal(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Equal(float lhs, float rhs)"
          }
        ],
        "not_equal": [
          {
            "Signature": "public static NDArray NotEqual(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray NotEqual(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray NotEqual(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float NotEqual(float lhs, float rhs)"
          }
        ],
        "greater": [
          {
            "Signature": "public static NDArray Greater(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Greater(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Greater(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Greater(float lhs, float rhs)"
          }
        ],
        "greater_equal": [
          {
            "Signature": "public static NDArray GreaterEqual(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray GreaterEqual(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray GreaterEqual(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float GreaterEqual(float lhs, float rhs)"
          }
        ],
        "lesser": [
          {
            "Signature": "public static NDArray Lesser(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray Lesser(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray Lesser(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float Lesser(float lhs, float rhs)"
          }
        ],
        "lesser_equal": [
          {
            "Signature": "public static NDArray LesserEqual(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray LesserEqual(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray LesserEqual(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float LesserEqual(float lhs, float rhs)"
          }
        ],
        "logical_and": [
          {
            "Signature": "public static NDArray LogicalAnd(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray LogicalAnd(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray LogicalAnd(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float LogicalAnd(float lhs, float rhs)"
          }
        ],
        "logical_or": [
          {
            "Signature": "public static NDArray LogicalOr(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray LogicalOr(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray LogicalOr(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float LogicalOr(float lhs, float rhs)"
          }
        ],
        "logical_xor": [
          {
            "Signature": "public static NDArray LogicalXor(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray LogicalXor(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray LogicalXor(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static float LogicalXor(float lhs, float rhs)"
          }
        ],
        "true_divide": [
          {
            "Signature": "public static NDArray TrueDivide(NDArray lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray TrueDivide(NDArray lhs, float rhs)"
          },
          {
            "Signature": "public static NDArray TrueDivide(float lhs, NDArray rhs)"
          },
          {
            "Signature": "public static NDArray TrueDivide(float lhs, float rhs)"
          }
        ],
        "concatenate": [
          {
            "Signature": "public static object Concatenate(NDArrayList arrays, int axis = 0, bool alwaysCopy = true)"
          }
        ],
        "imdecode": [
          {
            "Signature": "public static NDArray Imdecode(string strImg, ValueTuple<int, int, int, int> clipRect, NDArray @out = null, int index = 0, int channels = 3, object mean = null)"
          }
        ],
        "zeros": [
          {
            "Signature": "public static object Zeros(Shape shape, Context ctx = null, DType dtype = default)"
          }
        ],
        "eye": [
          {
            "Signature": "public static object Eye(object N, int M = 0, int k = 0, Context ctx = null, DType dtype = default)"
          }
        ],
        "empty": [
          {
            "Signature": "public static NDArray Empty(Shape shape, Context ctx = null, DType dtype = default)"
          }
        ],
        "histogram": [
          {
            "Drop": true,
            "Signature": "public static object Histogram(object a, int bins = 10, object range = null)"
          }
        ],
        "split_v2": [
          {
            "Signature": "public static NDArray SplitV2(NDArray ary, int indicesOrSections, int axis = 0, bool squeezeAxis = false)",
            "Locals": {
              "indices": {
                "Type": "List<int>"
              }
            }
          },
          {
            "Signature": "public static NDArray SplitV2(NDArray ary, IEnumerable<int> indicesOrSections, int axis = 0, bool squeezeAxis = false)",
            "Locals": {
              "indices": {
                "Type": "List<int>"
              }
            }
          }
        ],
        "_dlpack_deleter": [
          {
            "Drop": true,
            "Signature": "internal static object _dlpackDeleter(object pycapsule)"
          }
        ],
        "to_dlpack_for_read": [
          {
            "Drop": true,
            "Signature": "public static object ToDlpackForRead(object data)"
          }
        ],
        "to_dlpack_for_write": [
          {
            "Drop": true,
            "Signature": "public static object ToDlpackForWrite(object data)"
          }
        ],
        "from_dlpack": [
          {
            "Drop": true,
            "Signature": "public static object FromDlpack(object dlpack)"
          }
        ],
        "dl_managed_tensor_deleter": [
          {
            "Drop": true,
            "Signature": "public static object DlManagedTensorDeleter(object dlManagedTensorHandle)"
          }
        ],
        "from_numpy": [
          {
            "Drop": true,
            "Signature": "public static object FromNumpy(object ndarray, bool zeroCopy = true)"
          }
        ],
        "_make_manager_ctx": [
          {
            "Signature": "internal object _makeManagerCtx(object obj)"
          }
        ],
        "_make_dl_tensor": [
          {
            "Drop": true,
            "Signature": "internal object _makeDlTensor(object array)"
          }
        ],
        "_make_dl_managed_tensor": [
          {
            "Drop": true,
            "Signature": "internal object _makeDlManagedTensor(object array)"
          }
        ]
      },
      "StaticFields": {
        "_STORAGE_TYPE_UNDEFINED": {
          "Type": "int"
        },
        "_STORAGE_TYPE_DEFAULT": {
          "Type": "int"
        },
        "_STORAGE_TYPE_ROW_SPARSE": {
          "Type": "int"
        },
        "_STORAGE_TYPE_CSR": { "Type": "int" },
        "_DTYPE_NP_TO_MX": { "Type": "Dictionary<DType, int>" },
        "_DTYPE_MX_TO_NP": { "Type": "Dictionary<int, DType>" },
        "_STORAGE_TYPE_STR_TO_ID": { "Type": "Dictionary<string, int>" },
        "_STORAGE_TYPE_ID_TO_STR": { "Type": "Dictionary<int, string>" },
        "_GRAD_REQ_MAP": { "Type": "Dictionary<string, int>" },
        "_NDARRAY_UNSUPPORTED_INDEXING": { "Type": "int" },
        "_NDARRAY_BASIC_INDEXING": { "Type": "int" },
        "_NDARRAY_ADVANCED_INDEXING": { "Type": "int" },
        "PyCapsuleDestructor": { "Drop": true },
        "_c_str_dltensor": { "Drop": true },
        "_c_str_used_dltensor": { "Drop": true },
        "_c_dlpack_deleter": { "Drop": true },
        "DeleterFunc": { "Drop": true }
        }
    },
    "NDArray": {
      "Name": "NDArray",
      "BaseClasses": [
        "NDArrayBase"
      ],
      "Fields": {
        "handle": {
          "Signature": "public NDArrayHandle Handle { get; set; }",
          "Inherited": true
        }
      },
      "Methods": {
        "_tvm_handle": [
          {
            "Drop": true,
            "Signature": "internal object _tvmHandle"
          }
        ],
        "__repr__": [
          {
            "Signature": "internal object __Repr__()"
          }
        ],
        "__reduce__": [
          {
            "Drop": true,
            "Signature": "internal object __Reduce__()"
          }
        ],
        "_to_shared_mem": [
          {
            "Signature": "internal object __ToSharedMem__()"
          }
        ],
        "__add__": [
          {
            "Signature": "internal object __Add__(NDArray other)"
          }
        ],
        "__iadd__": [
          {
            "Signature": "internal object __Iadd__(NDArray other)"
          }
        ],
        "__radd__": [
          {
            "Signature": "internal object __Radd__(NDArray other)"
          }
        ],
        "__sub__": [
          {
            "Signature": "internal object __Sub__(NDArray other)"
          }
        ],
        "__isub__": [
          {
            "Signature": "internal object __Isub__(NDArray other)"
          }
        ],
        "__rsub__": [
          {
            "Signature": "internal object __Rsub__(NDArray other)"
          }
        ],
        "__mul__": [
          {
            "Signature": "internal object __Mul__(NDArray other)"
          }
        ],
        "__neg__": [
          {
            "Signature": "internal object __Neg__()"
          }
        ],
        "__imul__": [
          {
            "Signature": "internal object __Imul__(NDArray other)"
          }
        ],
        "__rmul__": [
          {
            "Signature": "internal object __Rmul__(NDArray other)"
          }
        ],
        "__div__": [
          {
            "Signature": "internal object __Div__(NDArray other)"
          }
        ],
        "__rdiv__": [
          {
            "Signature": "internal object __Rdiv__(NDArray other)"
          }
        ],
        "__idiv__": [
          {
            "Signature": "internal object __Idiv__(NDArray other)"
          }
        ],
        "__truediv__": [
          {
            "Signature": "internal object __Truediv__(NDArray other)"
          }
        ],
        "__rtruediv__": [
          {
            "Signature": "internal object __Rtruediv__(NDArray other)"
          }
        ],
        "__itruediv__": [
          {
            "Signature": "internal object __Itruediv__(NDArray other)"
          }
        ],
        "__mod__": [
          {
            "Signature": "internal object __Mod__(NDArray other)"
          }
        ],
        "__rmod__": [
          {
            "Signature": "internal object __Rmod__(NDArray other)"
          }
        ],
        "__imod__": [
          {
            "Signature": "internal object __Imod__(NDArray other)"
          }
        ],
        "__pow__": [
          {
            "Signature": "internal object __Pow__(NDArray other)"
          }
        ],
        "__rpow__": [
          {
            "Signature": "internal object __Rpow__(NDArray other)"
          }
        ],
        "__eq__": [
          {
            "Signature": "internal object __Eq__(NDArray other)"
          }
        ],
        "__hash__": [
          {
            "Signature": "internal object __Hash__()"
          }
        ],
        "__ne__": [
          {
            "Signature": "internal object __Ne__(NDArray other)"
          }
        ],
        "__gt__": [
          {
            "Signature": "internal object __Gt__(NDArray other)"
          }
        ],
        "__ge__": [
          {
            "Signature": "internal object __Ge__(NDArray other)"
          }
        ],
        "__lt__": [
          {
            "Signature": "internal object __Lt__(NDArray other)"
          }
        ],
        "__le__": [
          {
            "Signature": "internal object __Le__(NDArray other)"
          }
        ],
        "__bool__": [
          {
            "Signature": "internal object __Bool__()"
          }
        ],
        "__len__": [
          {
            "Signature": "internal object __Len__()"
          }
        ],
        "__getstate__": [
          {
            "Drop": true,
            "Signature": "internal object __Getstate__()"
          }
        ],
        "__setstate__": [
          {
            "Drop": true,
            "Signature": "internal object __Setstate__(object state)"
          }
        ],
        "__setitem__": [
          {
            "Signature": "internal void __Setitem__(int key, NDArray value)"
          },
          {
            "Signature": "internal void __Setitem__(PySlice key, NDArray value)"
          }
        ],
        "__getitem__": [
          {
            "Signature": "internal object __Getitem__(NDArray key)"
          }
        ],
        "_get_index_nd": [
          {
            "Drop": true,
            "Signature": "internal NDArray _getIndexNd(int[] key)",
            "Reassigned": [
              "idx_i"
            ],
            "Locals": {
              "indices": {
                "Type": "List<NDArray>"
              },
              "advanced_indices": {
                "Type": "Shape"
              },
              "basic_indices": {
                "Type": "Shape"
              },
              "advanced_index_bshape": {
                "Type": "Shape"
              },
              "idx_i": {
                "Type": "int"
              },
              "idx_iReassigned": {
                "Type": "NDArray"
              },
              "index_bshape_list": {
                "Type": "List<Shape>"
              }
            }
          }
        ],
        "_prepare_value_nd": [
          {
            "Signature": "internal object _prepareValueNd(float value, Shape vshape)"
          },
          {
            "Signature": "internal object _prepareValueNd(NDArray value, Shape vshape)"
          }
        ],
        "_set_nd_basic_indexing": [
          {
            "Signature": "internal void _setNdBasicIndexing(int key, NDArray value)",
            "Locals": {
              "begin": {
                "Type": "Shape"
              },
              "end": {
                "Type": "Shape"
              },
              "steps": {
                "Type": "Shape"
              },
              "oshape": {
                "Type": "Shape"
              },
              "vshape": {
                "Type": "Shape"
              },
              "slice_i": {
                "Type": "int"
              }
            }
          },
          {
            "Signature": "internal void _setNdBasicIndexing(PySlice key, NDArray value)",
            "Locals": {
              "begin": {
                "Type":  "Shape"
              },
              "end": {
                "Type":  "Shape"
              },
              "steps": {
                "Type":  "Shape"
              },
              "oshape": {
                "Type":  "Shape"
              },
              "vshape": {
                "Type": "Shape"
              },
              "slice_i": {
                "Type": "int"
              }
            }
          }
        ],
        "_set_nd_advanced_indexing": [
          {
            "Drop": true,
            "Signature": "internal void _setNdAdvancedIndexing(int[] key, float value)"
          }
        ],
        "_get_nd_basic_indexing": [
          {
            "Signature": "internal NDArray _getNdBasicIndexing(int key)"
          },
          {
            "Signature": "internal NDArray _getNdBasicIndexing(PySlice key)"
          }
        ],
        "_get_nd_advanced_indexing": [
          {
            "Drop": true,
            "Signature": "internal object _getNdAdvancedIndexing(object key)"
          }
        ],
        "_sync_copyfrom": [
          {
            "Signature": "internal object _syncCopyfrom(object sourceArray)"
          }
        ],
        "_slice": [
          {
            "Signature": "internal NDArray _slice(int start, int stop)"
          }
        ],
        "_at": [
          {
            "Signature": "internal NDArray _at(int idx)"
          }
        ],
        "reshape": [
          {
            "Signature": "public NDArray Reshape(Shape shape, bool reverse = false)",
            "Locals": {
              "kwargs": {
                "Type": "string[]",
                "Definition": "var kwargs = new string[0];"
              }
            }
          }
        ],
        "reshape_like": [
          {
            "Signature": "public NDArray ReshapeLike(NDArray rhs, NDArray @out = null)",
            "VariadicArguments": [
              "rhs",
              "out"
            ]
          }
        ],
        "zeros_like": [
          {
            "Signature": "public NDArray ZerosLike(NDArray @out = null)",
            "VariadicArguments": [
              "out"
            ]
          }
        ],
        "ones_like": [
          {
            "Signature": "public NDArray OnesLike(NDArray @out = null)",
            "VariadicArguments": [
              "out"
            ]
          }
        ],
        "broadcast_axes": [
          {
            "Drop": true,
            "Signature": "public NDArray BroadcastAxes(Shape axis, Shape size, NDArray @out = null)",
            "VariadicArguments": [
              "axis", "size", "out"
            ]
          }
        ],
        "repeat": [
          {
            "Signature": "public NDArray Repeat(int repeat, int axis, NDArray @out = null)",
            "VariadicArguments": [
              "repeat",
              "axis"
            ]
          }
        ],
        "pad": [
          {
            "Signature": "public NDArray Pad(string mode, Shape padWidth, double constantValue, NDArray @out = null)",
            "VariadicArguments": [
              "mode",
              "pad_width",
              "constant_value",
              "out"
            ]
          }
        ],
        "swapaxes": [
          {
            "Drop": true,
            "Signature": "public NDArray Swapaxes(int dim1, int dim2, NDArrayList @out = null)",
            "VariadicArguments": [
              "dim1",
              "dim2",
              "out"
            ]
          }
        ],
        "split": [
          {
            "Drop": true,
            "Signature": "public NDArray Split(object *args)"
          }
        ],
        "split_v2": [
          {
            "Drop": true,
            "Signature": "public NDArray SplitV2(object *args)"
          }
        ],
        "slice": [
          {
            "Signature": "public NDArray Slice(Shape begin, Shape end, Shape step, NDArrayList @out = null)",
            "VariadicArguments": [
              "begin",
              "end",
              "step",
              "out"
            ]
          }
        ],
        "slice_axis": [
          {
            "Signature": "public NDArray SliceAxis(int axis, int begin, int end, NDArrayList @out = null)",
            "VariadicArguments": [
              "axis",
              "begin",
              "end",
              "out"
            ]
          }
        ],
        "slice_like": [
          {
            "Signature": "public NDArray SliceLike(NDArray shapeLike, Shape axes, NDArrayList @out = null)",
            "VariadicArguments": [
              "shape_like",
              "axes",
              "out"
            ]
          }
        ],
        "take": [
          {
            "Signature": "public NDArray Take(NDArray indices, int axis, string mode, NDArrayList @out = null)",
            "VariadicArguments": [
              "indices",
              "axis",
              "mode",
              "out"
            ]
          }
        ],
        "one_hot": [
          {
            "Signature": "public NDArray OneHot(int depth, double onValue, double offValue, DType dtype, NDArrayList @out = null)",
            "VariadicArguments": [
              "depth",
              "on_value",
              "off_value",
              "dtype",
              "out"
            ]
          }
        ],
        "pick": [
          {
            "Signature": "public NDArray Pick(NDArray index, int axis, bool keepdims, string mode, NDArrayList @out = null)",
            "VariadicArguments": [
              "index",
              "axis",
              "keepdims",
              "mode",
              "out"
            ]
          }
        ],
        "sort": [
          {
            "Signature": "public NDArray Sort(int axis, bool isAscend, NDArrayList @out = null)",
            "VariadicArguments": [
              "axis",
              "is_ascend",
              "out"
            ]
          }
        ],
        "topk": [
          {
            "Signature": "public NDArray Topk(int axis, int k, string retTyp, bool isAscend, DType dtype, NDArrayList @out = null)",
            "VariadicArguments": [
              "axis",
              "k",
              "ret_typ",
              "is_ascend",
              "dtype",
              "out"
            ]
          }
        ],
        "argsort": [
          {
            "Signature": "public NDArray Argsort(object *args)"
          }
        ],
        "argmax": [
          {
            "Signature": "public NDArray Argmax(object *args)"
          }
        ],
        "argmax_channel": [
          {
            "Signature": "public NDArray ArgmaxChannel(object *args)"
          }
        ],
        "argmin": [
          {
            "Signature": "public NDArray Argmin(object *args)"
          }
        ],
        "clip": [
          {
            "Signature": "public NDArray Clip(object *args)"
          }
        ],
        "abs": [
          {
            "Signature": "public NDArray Abs(object *args)"
          }
        ],
        "sign": [
          {
            "Signature": "public NDArray Sign(object *args)"
          }
        ],
        "flatten": [
          {
            "Signature": "public NDArray Flatten(object *args)"
          }
        ],
        "shape_array": [
          {
            "Signature": "public NDArray ShapeArray(object *args)"
          }
        ],
        "size_array": [
          {
            "Signature": "public NDArray SizeArray(object *args)"
          }
        ],
        "expand_dims": [
          {
            "Signature": "public NDArray ExpandDims(object *args)"
          }
        ],
        "tile": [
          {
            "Signature": "public NDArray Tile(object *args)"
          }
        ],
        "transpose": [
          {
            "Signature": "public object Transpose(object *args)"
          }
        ],
        "flip": [
          {
            "Signature": "public NDArray Flip(object *args)"
          }
        ],
        "depth_to_space": [
          {
            "Signature": "public NDArray DepthToSpace(object *args)"
          }
        ],
        "space_to_depth": [
          {
            "Signature": "public NDArray SpaceToDepth(object *args)"
          }
        ],
        "diag": [
          {
            "Signature": "public NDArray Diag(int k = 0)"
          }
        ],
        "sum": [
          {
            "Signature": "public NDArray Sum(object *args)"
          }
        ],
        "nansum": [
          {
            "Signature": "public NDArray Nansum(object *args)"
          }
        ],
        "prod": [
          {
            "Signature": "public NDArray Prod(object *args)"
          }
        ],
        "nanprod": [
          {
            "Signature": "public NDArray Nanprod(object *args)"
          }
        ],
        "mean": [
          {
            "Signature": "public NDArray Mean(object *args)"
          }
        ],
        "max": [
          {
            "Signature": "public NDArray Max(object *args)"
          }
        ],
        "min": [
          {
            "Signature": "public NDArray Min(object *args)"
          }
        ],
        "norm": [
          {
            "Signature": "public NDArray Norm(object *args)"
          }
        ],
        "round": [
          {
            "Signature": "public NDArray Round(object *args)"
          }
        ],
        "rint": [
          {
            "Signature": "public NDArray Rint(object *args)"
          }
        ],
        "fix": [
          {
            "Signature": "public NDArray Fix(object *args)"
          }
        ],
        "floor": [
          {
            "Signature": "public NDArray Floor(object *args)"
          }
        ],
        "ceil": [
          {
            "Signature": "public NDArray Ceil(object *args)"
          }
        ],
        "trunc": [
          {
            "Signature": "public NDArray Trunc(object *args)"
          }
        ],
        "sin": [
          {
            "Signature": "public NDArray Sin(object *args)"
          }
        ],
        "cos": [
          {
            "Signature": "public NDArray Cos(object *args)"
          }
        ],
        "tan": [
          {
            "Signature": "public NDArray Tan(object *args)"
          }
        ],
        "arcsin": [
          {
            "Signature": "public NDArray Arcsin(object *args)"
          }
        ],
        "arccos": [
          {
            "Signature": "public NDArray Arccos(object *args)"
          }
        ],
        "arctan": [
          {
            "Signature": "public NDArray Arctan(object *args)"
          }
        ],
        "degrees": [
          {
            "Signature": "public NDArray Degrees(object *args)"
          }
        ],
        "radians": [
          {
            "Signature": "public NDArray Radians(object *args)"
          }
        ],
        "sinh": [
          {
            "Signature": "public NDArray Sinh(object *args)"
          }
        ],
        "cosh": [
          {
            "Signature": "public NDArray Cosh(object *args)"
          }
        ],
        "tanh": [
          {
            "Signature": "public NDArray Tanh(object *args)"
          }
        ],
        "arcsinh": [
          {
            "Signature": "public NDArray Arcsinh(object *args)"
          }
        ],
        "arccosh": [
          {
            "Signature": "public NDArray Arccosh(object *args)"
          }
        ],
        "arctanh": [
          {
            "Signature": "public NDArray Arctanh(object *args)"
          }
        ],
        "exp": [
          {
            "Signature": "public NDArray Exp(object *args)"
          }
        ],
        "expm1": [
          {
            "Signature": "public NDArray Expm1(object *args)"
          }
        ],
        "log": [
          {
            "Signature": "public NDArray Log(object *args)"
          }
        ],
        "log10": [
          {
            "Signature": "public NDArray Log10(object *args)"
          }
        ],
        "log2": [
          {
            "Signature": "public NDArray Log2(object *args)"
          }
        ],
        "log1p": [
          {
            "Signature": "public NDArray Log1p(object *args)"
          }
        ],
        "sqrt": [
          {
            "Signature": "public NDArray Sqrt(object *args)"
          }
        ],
        "rsqrt": [
          {
            "Signature": "public NDArray Rsqrt(object *args)"
          }
        ],
        "cbrt": [
          {
            "Signature": "public NDArray Cbrt(object *args)"
          }
        ],
        "rcbrt": [
          {
            "Signature": "public NDArray Rcbrt(object *args)"
          }
        ],
        "square": [
          {
            "Signature": "public NDArray Square(object *args)"
          }
        ],
        "reciprocal": [
          {
            "Signature": "public NDArray Reciprocal(object *args)"
          }
        ],
        "relu": [
          {
            "Signature": "public NDArray Relu(object *args)"
          }
        ],
        "sigmoid": [
          {
            "Signature": "public NDArray Sigmoid(object *args)"
          }
        ],
        "softmax": [
          {
            "Signature": "public NDArray Softmax(object *args)"
          }
        ],
        "log_softmax": [
          {
            "Signature": "public NDArray LogSoftmax(object *args)"
          }
        ],
        "softmin": [
          {
            "Signature": "public NDArray Softmin(object *args)"
          }
        ],
        "squeeze": [
          {
            "Signature": "public NDArray Squeeze(Shape axis)",
            "VariadicArguments": [
              "axis"
            ]
          }
        ],
        "broadcast_to": [
          {
            "Signature": "public NDArray BroadcastTo(Shape shape)"
          }
        ],
        "broadcast_like": [
          {
            "Signature": "public NDArray BroadcastLike(NDArray other)"
          }
        ],
        "wait_to_read": [
          {
            "Signature": "public object WaitToRead()"
          }
        ],
        "ndim": [
          {
            "Signature": "public int Ndim"
          }
        ],
        "shape": [
          {
            "Signature": "public Shape Shape"
          }
        ],
        "size": [
          {
            "Signature": "public int Size"
          }
        ],
        "context": [
          {
            "Signature": "public Context Context"
          }
        ],
        "dtype": [
          {
            "Signature": "public DType DType"
          }
        ],
        "stype": [
          {
            "Signature": "public string SType"
          }
        ],
        "T": [
          {
            "Signature": "public NDArray T"
          }
        ],
        "_fresh_grad": [
          {
            "SignatureSetter": "internal void Set_freshGrad(object state)"
          }
        ],
        "asnumpy": [
          {
            "Signature": "public Np.NDArray Asnumpy()"
          }
        ],
        "asscalar": [
          {
            "Signature": "public float Asscalar()"
          }
        ],
        "astype": [
          {
            "Signature": "public NDArray Astype(DType dtype, bool copy = true)"
          }
        ],
        "copyto": [
          {
            "Signature": "public NDArray Copyto(NDArray other)"
          }
        ],
        "copy": [
          {
            "Signature": "public NDArray Copy()"
          }
        ],
        "as_in_context": [
          {
            "Signature": "public NDArray AsInContext(Context context)"
          }
        ],
        "attach_grad": [
          {
            "Signature": "public void AttachGrad(string gradReq = \"write\", string stype = null)",
            "Reassigned": [
              "grad_req"
            ],
            "Locals": {
              "grad": {
                "Type": "NDArray",
                "Definition": "NDArray grad;"
              }
            }
          }
        ],
        "grad": [
          {
            "Signature": "public object Grad"
          }
        ],
        "detach": [
          {
            "Signature": "public object Detach()"
          }
        ],
        "backward": [
          {
            "Signature": "public void Backward(NDArray outGrad = null, bool retainGraph = false, bool trainMode = true)",
            "Locals": {
              "ograd_handles": {
                "Type": "NDArrayHandle[]",
                "Definition": "NDArrayHandle[] ogradHandles = null;"
              }
            }
          }
        ],
        "tostype": [
          {
            "Signature": "public NDArray Tostype(string stype)"
          }
        ],
        "to_dlpack_for_read": [
          {
            "Drop": true,
            "Signature": "public object ToDlpackForRead()"
          }
        ],
        "to_dlpack_for_write": [
          {
            "Drop": true,
            "Signature": "public object ToDlpackForWrite()"
          }
        ]
      },
      "StaticFields": {
        "__nonzero__": {
          "Drop": true
        }
      }
    },
    "DLContext": {
      "Drop": true,
      "Name": "DLContext",
      "BaseClasses": [
        "object"
      ],
      "Fields": {},
      "Methods": {}
    },
    "DLDataType": {
      "Drop": true,
      "Name": "DLDataType",
      "BaseClasses": [
        "object"
      ],
      "Fields": {},
      "Methods": {}
    },
    "DLTensor": {
      "Drop": true,
      "Name": "DLTensor",
      "BaseClasses": [
        "object"
      ],
      "Fields": {},
      "Methods": {}
    },
    "DLManagedTensor": {
      "Drop": true,
      "Name": "DLManagedTensor",
      "BaseClasses": [
        "object"
      ],
      "Fields": {},
      "Methods": {}
    }
  }
}
